#include "Scenario.h"
#include "RenderSystem.h"
#include "InputSystem.h"
#include "TextList.h"

float printTime;

wchar_t* token;
TextList* textList1 = TextList::GetInstance();
int curChar = 0;     //ï¿½ï¿½ï¿½ï¿½ï¿½Ø¼ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿?ï¿½ï¿½ï¿½Ú±ï¿½ï¿½ï¿½
int maxChar = 0; //ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½                  ///ï¿½ï¿½ï¿½ß¿ï¿½ Å°ï¿½Ô·ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½Ñ¾î°¡ï¿½ï¿½ ï¿½×¹ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½î¸¦ ï¿½ç¼­ ï¿½ï¿½ï¿½ï¿½
int curPage = 0;   // ï¿½ï¿½ï¿½ï¿½Ï°ï¿½ï¿½Ö´ï¿?ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½Ñ¹ï¿½
int maxPage = 0;   // ï¿½ï¿½ ï¿½Ã³ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ ï¿½Ã³ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½Ø¼ï¿½ ï¿½Ö±ï¿½ï¿½Ê¿ï¿½

wchar_t str2[10][500];    // ï¿½ï¿½ï¿½Ï´ï¿½ ï¿½Þ¾Æ¿Â°ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½Ú·ï¿½ ï¿½ß¶ï¿½ ï¿½ï¿½ÆµÑºÎºï¿?
wchar_t str3[10][500];    //ï¿½Ñ±ï¿½ï¿½Ú¾ï¿½ ï¿½ï¿½ï¿½ï¿½Ò·ï¿½ï¿½ï¿?Ä«ï¿½ï¿½ï¿½ÒºÎºï¿½

void SetStoryScript(int _stage)
{
	wchar_t* p = nullptr;
	curChar = 0;
	maxChar = 0;
	curPage = 0;
	maxPage = 0;
	memset(str2, 0, sizeof(str2));

	if (_stage == 0)
	{
		token = wcstok_s(textList1->prologue, L"&", &p);
		while (token != NULL)
		{
			wcscpy_s(str2[maxPage], token);
			token = wcstok_s(NULL, L"&", &p);
			maxPage++;
		}
	}
	if (_stage == 1)
	{
		token = wcstok_s(textList1->stage1_story, L"&", &p);
		while (token != NULL)
		{
			wcscpy_s(str2[maxPage], token);
			token = wcstok_s(NULL, L"&", &p);
			maxPage++;
		}
	}
	else if (_stage == 2)
	{
		token = wcstok_s(textList1->stage2_story,L"&", &p);
		while (token != NULL)
		{
			wcscpy_s(str2[maxPage], token);
			token = wcstok_s(NULL, L"&", &p);
			maxPage++;
		}
	}
	else if (_stage == 3)
	{
		token = wcstok_s(textList1->stage3_story, L"&", &p);
		while (token != NULL)
		{
			wcscpy_s(str2[maxPage], token);
			token = wcstok_s(NULL, L"&", &p);
			maxPage++;
		}
	}
}

void SetEndingScript(int _stage, bool success)
{
	wchar_t* p = nullptr;
	curChar = 0;
	maxChar = 0;
	curPage = 0;
	maxPage = 0;
	memset(str2, 0, sizeof(str2));
	if (_stage == 1)
	{
		if (success)
		{
			token = wcstok_s(textList1->stage1_happy, L"&", &p);
			while (token != NULL)
			{
				wcscpy_s(str2[maxPage], token);
				token = wcstok_s(NULL, L"&", &p);
				maxPage++;
			}
		}
		else
		{
			token = wcstok_s(textList1->stage1_bad, L"&", &p);
			while (token != NULL)
			{
				wcscpy_s(str2[maxPage], token);
				token = wcstok_s(NULL, L"&", &p);
				maxPage++;
			}
		}
	}
	else if (_stage == 2)
	{
		if (success)//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
		{
			token = wcstok_s(textList1->stage2_happy, L"&", &p);
			while (token != NULL)
			{
				wcscpy_s(str2[maxPage], token);
				token = wcstok_s(NULL, L"&", &p);
				maxPage++;
			}
		}
		else
		{
			token = wcstok_s(textList1->stage2_bad, L"&", &p);
			while (token != NULL)
			{
				wcscpy_s(str2[maxPage], token);
				token = wcstok_s(NULL, L"&", &p);
				maxPage++;
			}
		}
	}
	else if (_stage == 3)
	{
		if (success)//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
		{
			token = wcstok_s(textList1->stage3_happy, L"&", &p);
			while (token != NULL)
			{
				wcscpy_s(str2[maxPage], token);
				token = wcstok_s(NULL, L"&", &p);
				maxPage++;
			}
		}
		else
		{
			token = wcstok_s(textList1->stage3_bad, L"&", &p);
			while (token != NULL)
			{
				wcscpy_s(str2[maxPage], token);
				token = wcstok_s(NULL, L"&", &p);
				maxPage++;
			}
		}
	}
}

int GetMaxPage()
{
	return maxPage;
}
void SkipText(float delta)
{
	static ULONGLONG elapsedTime;
	elapsedTime += delta;
	//ï¿½ï¿½Æ®ï¿½ï¿½Å°ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ == ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½Ï³ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ø¿Í¼ï¿½ ï¿½Ñ±ï¿½ï¿½Ú¾ï¿½ï¿½ï¿½ÂµÇ´Â°ï¿½Ã³ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?
	if (input::IsKey(17))
	{
		printTime = 10;
	}
	else
	{
		printTime = 100;
	}
	//ï¿½Ø´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ ï¿½ß°ï¿½ï¿½ï¿½ï¿½Îºï¿½
	if(input::IsKeyUp(9))
	{
		if (curChar != maxChar)
		{
			curChar = maxChar;
		}
		//else
		//{
		//	if (curPage < maxPage - 1) // ï¿½ß°ï¿½ï¿½Ê¿ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½Ï°ï¿½ï¿?Å°ï¿½Ô·Â½ï¿½ ï¿½Ì´Ï°ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½Å³ï¿½ ï¿½ï¿½Æ°ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?ï¿½Ì´Ï°ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
		//	{                          // ï¿½ï¿½Æ°ï¿½Ñ°ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½È?¿½ï¿?ï¿½ï¿½ï¿½ï¿½ï¿½Ø¼ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½  boolï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ maxï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
		//		curPage++;             //È®ï¿½ï¿½ï¿½Ø¼ï¿½ ï¿½Ø¾ï¿½ï¿½Òµï¿½? ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ì½ºÅ¬ï¿½ï¿½ï¿½Ì¾ï¿½ï¿½ï¿½?
		//		curChar = 0;
		//	}
		//}
	}
	if (elapsedTime >= printTime)
	{
		if (curChar < maxChar)                 
		{
			curChar++;
			elapsedTime = 0;
		}
	}
	//ï¿½ï¿½ ï¿½ï¿½Â‰ï¿½ï¿½ï¿½ï¿½ï¿?ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½Ñ±ï¿½Îºï¿?
	if (input::IsKeyUp(16))
	{
		if (curPage < maxPage - 1) // ï¿½ß°ï¿½ï¿½Ê¿ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½Ï°ï¿½ï¿?Å°ï¿½Ô·Â½ï¿½ ï¿½Ì´Ï°ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½Å³ï¿½ ï¿½ï¿½Æ°ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?ï¿½Ì´Ï°ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
		{
			curPage++;
			curChar = 0;
		}
	}
	//ï¿½ï¿½ 9   //ï¿½ï¿½ï¿½ï¿½ 13  //ï¿½ï¿½ï¿½ï¿½Æ® 16
}
void UpdateText()
{
	
	maxChar = wcslen(str2[curPage]);
	wcsncpy_s(str3[curPage], str2[curPage], curChar);
	// if(curPage == maxChar) ï¿½Æ½ï¿½ï¿½ï¿½ ï¿½ï¿½Æ°Å¬ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½Ï°Ô²ï¿½
}
void PrintText()
{	
	render::DrawTextF(100, 100, str3[curPage], RGB(0, 0, 255), 50);

	
}